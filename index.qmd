```{r} 
#| label: a1
#| echo: false

reactable <- function(...) {
  reactable::reactable(..., wrap = F, resizable = T, bordered = T)
}

knit_print.data.frame = function(x, ...) {
  html = as.character(htmltools::as.tags(reactable(x,static = TRUE)))
  res = paste0("<div class='kable_wrapper'><br>", html, "</div>")
  knitr::asis_output(res)
}

registerS3method(
  "knit_print", "data.frame", knit_print.data.frame,
  envir = asNamespace("knitr")
)

```

```{r}
#| label: MkFJ9WKu
#| echo: false
library(tidyverse)
faculty <- read_csv("data/faculty.csv")
courses <- read_csv("data/courses.csv")
genes <- readRDS("data/rowdata.rds")
clin <- readRDS("data/coldata.rds")
assay <- readRDS("data/assay.rds")
```

## Attribution
These slides draw heavily from slides created by [@meghall06].

## Outline

::: {.incremental}
- What is R? 
- Basic data manipulation in R
- Using R effectively
- More data manipulation / WIP
- Visualizing data / WIP
- Bioconductor / WIP
- The analysis of expression data / WIP
- A peek at advanced topics
:::

# What is R?

---

## What is R?

R is an **open-source** scripting language and environment for working with data.

. . . 

Open-source means the software is free of charge. most importantly it means the we are **free** to inspect, use, modify and redistribute the software.

. . .

The R language is the vehicle of choice for research in statistical methodology, bioinformatics research and pharmaceutical industry.

---

## Why Not Excel?

::: {.incremental}
- Limited Data Handling

- Reproducibility Challenges

- Basic Statistical Tools

- Visualization Limitations

- Prone to Human Errors

- Lack of Automation

- No Version Control

- Insufficient Integration

- Scalability Constraints

- Security Concerns
:::

:::{.notes}
- **Limited Data Handling:** Explain scenarios where Excel cannot manage the size of biomedical datasets.
- **Reproducibility Challenges:** Discuss the importance of reproducible research and how Excel’s manual processes hinder this.
- **Basic Statistical Tools:** Highlight the need for advanced statistical analyses in biomedical research that Excel cannot provide.
- **Visualization Limitations:** Show examples of complex visualizations needed in research that are difficult to create in Excel.
- **Prone to Human Errors:** Share instances where manual errors in Excel could lead to significant research inaccuracies.
- **Lack of Automation:** Emphasize the time lost on repetitive tasks in Excel and the benefits of automation.
- **Version Control Issues:** Illustrate the difficulties in tracking changes and collaborating using Excel.
- **Insufficient Integration:** Explain the necessity of integrating with other research tools and databases, programming languages
- **Scalability Constraints:** Discuss how research projects grow and Excel's limitations in scaling with them.
- **Security Concerns:** Address the importance of data security in biomedical research and Excel’s shortcomings.
:::

---

## Why R?

::: {.incremental}
- Reproducible Analysis

- Handles Large & Complex Datasets

- Advanced Statistical Tools

- Superior Data Visualization

- Data and code are separate

- Automation & Efficiency

- Extensive Package Ecosystem

- Integration Capabilities

- Scalability & Performance
:::

:::{.notes}
- **Reproducible Analysis:** Demonstrate how R scripts can be reused and shared to ensure consistent results.
- **Handles Large & Complex Datasets:** Compare R’s capacity to handle large datasets versus Excel’s limitations.
- **Advanced Statistical Tools:** Provide examples of advanced statistical techniques available in R that are essential for biomedical research.
- **Superior Data Visualization:** Showcase some high-quality visualizations created with `ggplot2` to illustrate R’s capabilities.
- **Automation & Efficiency:** Explain how R can automate data processing tasks, reducing manual effort and errors.
- **Extensive Package Ecosystem:** Highlight key R packages that are particularly useful in biomedical sciences.
- **Active Community Support:** Mention resources like CRAN, Bioconductor, and community forums that support R users.
- **Integration Capabilities:** Describe how R can interface with databases, other programming languages, and research tools.
- **Scalability & Performance:** Discuss R’s ability to handle increasing data sizes and more complex analyses efficiently.
- **Enhanced Security:** Talk about R’s options for securing data and managing access, which are critical in biomedical research.
:::

---

## Getting R

::: {.logos}
[![](https://www.r-project.org/logo/Rlogo.svg)](https://cloud.r-project.org/)
[![](https://upload.wikimedia.org/wikipedia/commons/d/d0/RStudio_logo_flat.svg)](https://posit.co/download/rstudio-desktop/#download)

or: 

[![](http://mybinder.org/badge_logo.svg)](http://mybinder.org/v2/gh/she3o/whyR/master?urlpath=rstudio)
:::


---

## Navigating RStudio

![](images/RStudio1.webp)

. . .

::: {.absolute top="50%" left="10%"}
::: {style="color: #cc0000"}
code *can* go here
:::
:::

---

## Navigating RStudio

![](images/RStudio2.webp)


::: {.absolute top="35%" left="25%"}
::: {style="color: #cc0000"}
code can also<br>go here
:::
:::

---

## Using R

::: columns
::: {.column width="50%"}
<br>
<br>
You use R via *packages*
:::
::: {.fragment}
<br/>
...which contain *functions*
:::
::: {.fragment}
<br>
...which are just *verbs*
:::
:::

::: {.column width="50%"}
::: {.fragment}
![](images/tidyverse.webp){.absolute top="70" left="530" height="574" width="499"}
:::
:::

---

## data


::: {style="text-align: center"}
`genes` has `{r} ncol(genes) ` columns and `{r} nrow(genes)` rows.
:::

<br>

::: {style="font-size: 0.75em"}
```{r}
#| label: iWNAPYQa
#| echo: false
genes
```
:::

---

## data

::: {style="text-align: center"}
`clin` has `{r} ncol(clin) ` columns and `{r} nrow(clin)` rows.
:::

::: {style="font-size: 0.75em"}
```{r}
#| label: hHTdyf5b
#| echo: false
clin
```
:::

## data

::: {style="text-align: center"}
`assay` is a `{r} ncol(assay) `x`{r} nrow(assay)` matrix.
:::

<br>

```{r}
#| label: ey5xstNn
#| echo: false
display_assay <- assay[1:100,1:100]
colnames(display_assay) <- NULL
rownames(display_assay) <- NULL
display_assay
```

# Basic data manipulation

---

## Useful operators

<br>
<br>

::: columns
::: {.column width="15%"}
::: {style="font-size: 1.75em; text-align: center"}
`<-` 
:::
:::

::: {.column width="30%"}
::: {style="font-size: 1.5em; text-align: center"}
"save as" 
:::
:::
:::

. . .

::: columns
::: {.column width="15%"}
::: {style="font-size: 1.75em; text-align: center"}
`|>` 
:::
:::

::: {.column width="30%"}
::: {style="font-size: 1.5em; text-align: center"}
"and then" 
:::
:::
:::

---

## Common functions

`filter` keeps or discards rows (aka observations)

`select` keeps or discards columns (aka variables)

`arrange` sorts data set by certain variable(s)

`count` tallies data set by certain variable(s)

`mutate` creates new variables

`group_by`/`summarize` aggregates data ([pivot tables]{style="color:#cc0000"}!)

`str_*` functions work with text

---

## Syntax of a function


`function(data, argument(s))`


. . .

is the same as


`
data |>`
  `function(arguments(3)) `
---

## Filter


`filter` keeps or discards rows (aka observations)

the `==` operator tests for equality

. . .

```{r}
#| label: d1ABdY4A
#| output-location: column-fragment
genes |>
  filter(gene_type == "miRNA")
```

---

## Filter

the `|` operator signifies "or"

. . .

```{r}
#| label: 5ZhV148X
#| output-location: column-fragment
#| code-line-numbers: "1|2-5"
clin |> 
  filter(
    paper_pathologic_stage == "Stage_II" |
    paper_pathologic_stage == "Stage_III"
  )
```

---

## Filter

the `%in%` operator allows for multiple options in a list

. . .

```{r}
#| label: yvgIsawA
#| output-location: column-fragment
#| code-line-numbers: "1|2,4|3"
genes |> 
  filter(
    gene_name %in% c("BRCA1", "TP53", "PTEN")
  )
```

---

## Filter

the `&` operator combines conditions

```{r}
#| label: aW6LkBpL
#| output-location: column-fragment
#| code-line-numbers: "1|2,5|3|4"
clin |> 
  filter(
    paper_pathologic_stage %in% c("Stage_I", "Stage_II") &
    year_of_birth > 1970
  )
```

---

## Select

`select` keeps or discards columns (aka variables)

```{r}
#| label: WljrJeak
#| output-location: column-fragment
#| code-line-numbers: "1,2,7|3-6"
clin |> 
  select(
    patient,
    ajcc_pathologic_n,
    ajcc_pathologic_m,
    ajcc_pathologic_t
  )
```

---

## Select

can drop columns with `- column`

```{r}
#| label: KBjCyG4x
#| output-location: fragment
#| code-line-numbers: "2-6"
clin |> 
  select(
    -barcode,
    -sample,
    -sample_submitter_id
  )
```

---

## Select

the pipe `|>` chains multiple functions together

```{r}
#| label: Mm9PKNY0
#| output-location: column-fragment
#| code-line-numbers: "1|2-4|5"
genes |> 
  filter(
    gene_type == "lncRNA"
  ) |>
  pull(gene_name)
```

---

## Select (Advanced)

You can achieve the same result with less typing if you use cryptic R!

```{r}
#| eval: false
genes %>%
  .[.[, 3] == "lncRNA", 4]
```

---

## Arrange

`arrange` sorts data set by certain variable(s)

use `desc()` to get descending order

```{r}
#| label: EK9GuHyT
#| output-location: column-fragment
#| code-line-numbers: "2"
clin |>
  arrange(desc(age_at_diagnosis))
```

---

## Count

`count` tallies data set by certain variable(s) (very useful for familiarizing yourself with data)

```{r}
#| label: hZevGbW3
#| output-location: column-fragment
#| code-line-numbers: "2"
clin |> 
  count(gender)
```

---

## Count

can use `sort = TRUE` to order results

```{r}
#| label: Tl7Zf76N
#| output-location: column-fragment
#| code-line-numbers: "2"
clin |> 
  count(paper_pathologic_stage, sort = TRUE)
```

---

## Count

You can tally across all combinations of multiple variables


. . .

```{r}
#| label: 5i0kXe3J
#| output-location: column-fragment
#| code-line-numbers: "2-6"
clin |> 
  count(
    paper_pathologic_stage,
    paper_BRCA_Pathology,
    sort = TRUE
  )
```

---

## Mutate

`mutate` creates new variables (with a single `=`)

```{r}
#| label: JC1nvb4i
clin |> mutate(source = "TCGA")
```

---

## Mutate

Much more useful with a conditional such as `ifelse()`, which has three arguments:

condition, value if true, value if false

```{r}
#| label: DkRfnDz3
#| output-location: column-fragment
clin |> count(ajcc_pathologic_m)
```
---

## Mutate

```{r}
#| label: u3yHTu4F
#| output-location: column-fragment
#| code-line-numbers: "1,2,7|3-6|1,2,7,8"
clin |> 
  mutate(
    metastatic = ifelse(
      ajcc_pathologic_m %in% c("M0", "cM0 (i+)") ,
      0, 1
    )
  ) |>
  select(metastatic, ajcc_pathologic_m)
```

---

## Mutate

the `!` operator means *not* 

`is.na()` identifies unavailable values

```{r}
#| label: TP5vo6Kr
#| output-location: column-fragment
#| code-line-numbers: "|4|"
clin |> 
  mutate(
    metastatic = ifelse(
      !is.na(ajcc_pathologic_m) &
      ajcc_pathologic_m %in% c("M0", "cM0 (i+)") ,
      0,1
    )
  ) |>
  select(metastatic, ajcc_pathologic_m)
```

---

## Mutate

with multiple conditions, `case_when()` is much easier!

. . .

```{r}
#| label: wuzuz8p1
#| output-location: column-fragment
#| code-line-numbers: "|3-9|"
clin |> 
  mutate(
    t = case_when(
      ajcc_pathologic_t %in% c("T1", "T1a", "T1b", "T1c") ~ "T1",
      ajcc_pathologic_t %in% c("T2", "T2a", "T2b") ~ "T2",
      ajcc_pathologic_t %in% c("T3", "T3a") ~ "T3",
      ajcc_pathologic_t %in% c("T4", "T4b", "T4d") ~ "T4",
      ajcc_pathologic_t == "TX" ~ NA,
    )
  ) |> select(t, ajcc_pathologic_t)
```

---

## Mutate

Here is real-life code

```{r}
#| label: clZFLjHk
#| eval: false
#| code-line-numbers: "|8,9"
clin |> 
  mutate(
    t = case_when(
      str_starts(ajcc_pathologic_t, "T1") ~ "T1",
      str_starts(ajcc_pathologic_t, "T2") ~ "T2",
      str_starts(ajcc_pathologic_t, "T3") ~ "T3",
      str_starts(ajcc_pathologic_t, "T4") ~ "T4",
      ajcc_pathologic_t == "TX" ~ NA_character_,
      TRUE ~ ajcc_pathologic_t
    )
  ) |>
  select(t, ajcc_pathologic_t)
```
---

## Mutate

Here is real-life code

```{r}
#| label: VXXgRndA
#| output-location: column-fragment
#| code-line-numbers: "|3-9"
genes %>%
  mutate(
    full_gene_name = AnnotationDbi::mapIds(
      org.Hs.eg.db::org.Hs.eg.db,
      keys = gene_name,
      column = "GENENAME",
      keytype = "SYMBOL",
      multiVals = "first"
    )
  ) |>
  select(
      gene_name,
      full_gene_name
    )
```

---

## Group by / summarize

`group_by`/`summarize` aggregates data (**pivot tables**!)

`group_by()` identifies the grouping variable(s) and `summarize()` specifies the aggregation 

. . .

```{r}
#| label: XCq9HEtL
#| output-location: column-fragment
#| code-line-numbers: "|2-15|3-9|10-14|16-21|16|17-21|18|19|20"
clin |> 
  mutate(
    t = case_when(
      str_starts(ajcc_pathologic_t, "T1") ~ "T1",
      str_starts(ajcc_pathologic_t, "T2") ~ "T2",
      str_starts(ajcc_pathologic_t, "T3") ~ "T3",
      str_starts(ajcc_pathologic_t, "T4") ~ "T4",
      TRUE ~ NA_character_
    ),
    m = case_when(
      ajcc_pathologic_m == "M1" ~ "M1",
      ajcc_pathologic_m %in% c("M0", "cM0 (i+)") ~ "M0",
      TRUE ~ NA_character_
    )
  )|>
  group_by(t, m) |>
    summarize(
      count = n(),
      days_to_death = mean(days_to_death),
      certainty = sd(days_to_death)
    )
```

---

## Group by / summarize

```{r}
#| label: Xtq9HEtL
#| output-location: column-fragment
#| code-line-numbers: "16|20,21|"
clin |> 
  mutate(
    t = case_when(
      str_starts(ajcc_pathologic_t, "T1") ~ "T1",
      str_starts(ajcc_pathologic_t, "T2") ~ "T2",
      str_starts(ajcc_pathologic_t, "T3") ~ "T3",
      str_starts(ajcc_pathologic_t, "T4") ~ "T4",
      TRUE ~ NA_character_
    ),
    m = case_when(
      ajcc_pathologic_m == "M1" ~ "M1",
      ajcc_pathologic_m %in% c("M0", "cM0 (i+)") ~ "M0",
      TRUE ~ NA_character_
    )
  )|>
  tidyr::drop_na(t,m) |>
  group_by(t, m) |>
    summarize(
      count = n(),
      days_to_death = mean(days_to_death, na.rm = TRUE),
    ) |>
  arrange(desc(days_to_death)) -> clin_summary
```


# Using R effectively

---

## Working in RStudio

::: columns
::: {.column width="50%"}
**Typing in the console**

- think of it like a post-it: useful for quick notes but disposable

- actions are saved but code is not

- one chunk of code is run at a time (`Return`)
:::

::: {.column width="50%"}
::: {.fragment}
**Typing in a code file**

- script files have a `.R` extension

- code is saved and sections of any size can be run (`Cmd + Return`)

- do ~95% of your typing in a code file instead of the console!
:::
:::
:::

---

## Working with packages

packages need to be installed on each computer you use

```{r}
#| label: JY64vXjQ
#| eval: false
install.packages("tidyverse") # only need to do this once (per computer)
```

. . .

Most commonly validated packages exist on CRAN.
So they can be installed with `install.packages`.

. . .

You can browse all CRAN packages [here](https://cran.r-project.org/web/views/)

---

## Working with packages

Packages that specialize in the analysis biological data are often hosted on **Bioconductor**.

. . .

They can be installed as follows:

```{r} 
#| label: a26
#| eval: false
#| code-line-numbers: "1,2|4"
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("limma")
```

. . .

You can browse all R Bioconductor packages [here](https://bioconductor.org/packages/release/BiocViews.html)

---

## Working with packages

[R-universe](https://r-universe.dev/search) indexes all R packages on the web.

. . .

Journals and regulatory bodies don't allow the use of arbitrary packages in submitted documents!

---

## Organizing with projects

[**highly**]{style="color: #cc0000"} recommend using *projects* to stay organized

keeps code files and data files together, allowing for easier file path navigation and better reproducible work habits

. . .

`File -> New Project`

more guidance: [here](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects) and [here](https://r4ds.had.co.nz/workflow-projects.html#rstudio-projects)

---

## Accessing data

use `read_csv()` to import a csv file

```{r}
#| label: rYyx53zA
#| eval: false
# the file path is this simple if you use projects!
# ?read_csv() in the console will bring up the help file with more options
faculty <- read_csv("faculty.csv")
```

---

## Accessing data

the [readxl](https://readxl.tidyverse.org/) package is helpful for Excel files

. . .


```{r}
#| label: WLXniAx2
#| eval: false
# needs to be loaded but not installed as it's part of the tidyverse
library(readxl)
faculty <- read_excel("faculty.xlsx", sheet = 2)
```

. . .

view the data with `View(faculty)` or by clicking on the data name in the Environment pane

---

## Accessing TCGA data

Most biological databases offer R packages that automate data retrieval.

```{r} 
#| label: a30
#| eval: false
#| code-line-numbers: "1|3-8|10|11"
library(TCGAbiolinks) # <1>

query <- GDCquery( # <2>
  project = "TCGA-BRCA", # <2>
  data.category = "Transcriptome Profiling", # <2>
  data.type = "Gene Expression Quantification", # <2>
  workflow.type = "STAR - Counts" # <2>
) # <2>

GDCdownload(query) # <3>
assay <- GDCprepare(query) # <4>
```
1. Load the `TCGAbiolinks` package to interact with TCGA servers.
2. Send a query to TCGA.
3. Download the queried data to your computer.
4. Transform and import the downloaded data to a suitable format.

# Data visualization

## ggplot2

`ggplot2` is the data visualization package that is loaded with the `tidyverse`

. . .

the [g]{style="color:#cc0000"}rammar of [g]{style="color:#cc0000"}raphics maps data to the aesthetic attributes of geometric points

. . .

encoding data into visual cues (e.g., length, color, position, size) is how we signify changes and comparisons

---

## Bar chart

```{r}
#| label: vTNYTAcP
#| output-location: column-fragment
#| fig-align: "center"
#| code-line-numbers: "1,2|3|4"
clin_summary |>
  ggplot() +
  aes(x = m, y = days_to_death) +
  geom_bar(stat = "identity")
```

---

## Bar chart

can create a prettier plot pretty easily

```{r}
#| label: OfWrTjpQ
#| fig-align: "center"
#| output-location: column-fragment
#| code-line-numbers: "1,2|3|4|5|6-9|10|11|12-15|13|14|"
clin_summary |>
  ggplot() +
  aes(x = reorder(m, -days_to_death), y = days_to_death) +
  geom_bar(stat = "identity", fill = "#2C7BB6") +
  scale_y_continuous(expand = expansion(mult = c(0, 0.2))) +
  labs(
    title = "Average Days Until Death by metastasis (TCGA)",
    x = "M Status"
  ) +
  coord_flip()+
  theme_linedraw() +
  theme(
    panel.grid.major.x = element_blank(),
    axis.ticks = element_blank()
  )
```

---

## ggplot2 resources

from [R for Data Science](https://r4ds.had.co.nz/data-visualisation.html)

[Data Visualization: a practical introduction](https://socviz.co/index.html#preface)

the [ggplot2 book](https://ggplot2-book.org/)

the [R graph gallery](https://r-graph-gallery.com/index.html)

# Other topics

## R Markdown / Quarto

Programs that combine **Markdown** and executable code

. . .

exceedingly useful for [parameterized reporting]{style="color:#cc0000"}: can create an R-based PDF report and generate it automatically for, say, each department

. . .

| Feature               | RMarkdown     | Quarto                         |
|-----------------------|---------------|--------------------------------|
| **Language Support**  | R   | R, Python, Julia, JavaScript   |

. . .

[R Markdown: The Definitive Guide](https://bookdown.org/yihui/rmarkdown/)

[Quarto](https://quarto.org/docs/)

---

## Internal packages

you can also create your *own* packages!

. . .

your package can hold:

- common data sets that are used across projects
- custom `ggplot2` themes
- common functions and calculations (and their definitions!)

---

## And of course, Statistics

[Introduction to Statistical learning](https://statlearning.com)!!!!

[Fahrmeir's Regression](https://link.springer.com/book/10.1007/978-3-662-63882-8). **EKB ACCESS**

# Learn more about R

## Resources

[R for Data Science](https://r4ds.had.co.nz/): the ultimate guide

[R for Excel users](https://rstudio-conf-2020.github.io/r-for-excel/): a very useful workshop

[STAT 545](https://stat545.com/): an online book on reproducible data analysis in R

the [Learn `tidyverse`](https://www.tidyverse.org/learn/) site

---

## Resources

[Use R](https://www.springer.com/series/6991/books) textbooks are all accessible via EKB.

[ggplot](https://link.springer.com/book/10.1007/978-3-319-24277-4)

[Data Wrangling with R](https://link.springer.com/book/10.1007/978-3-319-45599-0)

[An Introduction to Data Analysis in R](https://link.springer.com/book/10.1007/978-3-030-48997-7)

[Applied Survival Analysis Using R](https://link.springer.com/book/10.1007/978-3-319-31245-3)

[Epidemics](https://link.springer.com/book/10.1007/978-3-031-12056-5)

[Magnetic Resonance Brain Imaging](https://link.springer.com/book/10.1007/978-3-031-38949-8)

[Chemometrics with R](https://link.springer.com/book/10.1007/978-3-662-62027-4)

---

<!--
vim: cole=0
-->
